// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  JUSTIFIED
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  school   String?
  level    String?
  courses  Course[] // relación 1:N con Course
}

model Course {
  id           String    @id @default(uuid())
  name         String
  grade        String
  section      String
  level        String
  shift        String?
  academicYear Int       @default(2025)
  teacherId    String
  teacher      User      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  student      Student[]

  attendance Attendance[]
  evaluation Evaluation[]
}

model Student {
  id         String       @id @default(uuid())
  fullName   String
  dni        String?      @unique // DNI o código de matrícula (opcional)
  email      String?      @unique // Correo del alumno o tutor (opcional)
  birthDate  DateTime?    @db.Date
  gender     String?
  course     Course[]
  attendance Attendance[]
  grades     Grade[]
}

model Attendance {
  id        String           @id @default(uuid())
  date      DateTime         @db.Date
  status    AttendanceStatus
  studentId String
  courseId  String
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([date, studentId, courseId])
}

model Evaluation {
  id               String   @id @default(uuid())
  name             String
  date             DateTime
  maxScore         Int
  type             String
  term             String?
  courseId         String
  course           Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  evaluationResult Grade[]
}

model Grade {
  id           String     @id @default(uuid())
  score        Float
  observation  String?
  studentId    String
  evaluationId String
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
}

// Another backend

model Deck {
  id          String      @id
  name        String
  description String
  createdAt   BigInt
  androidId   String
  Flashcard   Flashcard[]
}

model Flashcard {
  id          String @id
  word        String
  meaning     String
  translation String
  phonetic    String
  audioPath   String
  imagePath   String
  note        String
  createdAt   BigInt
  isGenerated Int
  deckId      String
  androidId   String
  deck        Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)

  FlashcardExample FlashcardExample[]
}

model FlashcardExample {
  id          String    @id
  text        String
  translation String
  type        String
  flashcardId String
  androidId   String
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
}

model Quote {
  id            String @id
  title         String
  phrase        String
  description   String
  translation   String
  example       String
  context       String
  pronunciation String
  formality     String
  tags          String
  androidId     String
  createdAt     BigInt
}
